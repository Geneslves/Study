
1.return 退出该语句，return 0正常返回，return 1非正常返回
       strcmp库函数比较字符串是否相等 #include"string.h"
       函数说明在文件开头（所有函数之前），不必在各个函数中声明
       强制类型转换 :(类型名)(表达式)    例            (int)x+y
       结构体   struct 结构体名{成员列表};    . 访问成员变量（结构体名.成员）
  break终止跳出 continue跳出本次循环
        一           控制台输入输出
        (1)字符数据的输入/输出
        字符输出 putchar(int c);
        字符输入 getchar(void);
        (2)格式化输入/输出
        格式输出 printf("格式控制字符串",输出列表);
        格式输入 scanf("格式控制字符串",地址列表);
        (3)字符串的输入/输出
        字符串输出 puts(const char *str);
        字符串输入 gets(char *str);
        scanf不能接受空格、制表符Tab、回车等；对末尾回车符的处理           把回车符保留在缓存中。
        gets能够接受空格、制表符Tab和回车等；对末尾回车符的处理           接收回车，但把回车替换为\0。
        二           文件的读写
        (1)读写一个字符
        字符写函数 fputc(c,fp);
        字符读函数 fgetc(fp);
        (2)块读写
        二进制写函数 fwrite(buffer,size,count,fp);
        二进制读函数 fread(buffer,size,count,fp);
        格式化写函数 fprintf(文件指针,格式字符串,输出项表列);
        格式化读函数 fscanf(文件指针,格式字符串,地址参数列表);
        (3)其他读写函数
        磁盘文件写函数 putw(10,fp);
        磁盘文件读函数 getw(fp);
        文件字符串写函数 fputs(字符串,文件指针);
        文件字符串读函数 fgets(字符串数组名,n,文件指针);
  输入存在输入缓存区
########分支语句（if/switch）
2.if(){}  
    else if()
        {} 
        else
3.switch(){
    case:
    case: 
        break
    case；
        break
    default:        -----默认
    }
########循环语句
4.while (条件){
    循环语句           
    break;
    continue;
    }
5.for (表达式1;表达式2;表达式3){
      初始化  判断    调整
    循环语句
    }
            流程           表达式1->表达式2->循环体->   表达式3->   表达式2
            表达式都可以省略   判断省略恒为真
6.do{
    循环体
    }
 while (表达式)
7.递归运算速度慢，栈溢出
8.操作符
 .   访问成员变量（结构体名.成员）
 ->  结构体指针 -> 成员名  
exp1 , exp2 , .... , e++-xpN         逗号表达式            从左向右依次计算，最后结果为最后表达式结果
表达式1 ? 表达式2 : 表达式3        表达式1为真，取表达式2，否则取表达式3    唯一的三目运算符
================================================================================================================================

================================================================================================================================
================================================================================================================================

                                                数组

--------------------------------------------------------------------------------------------------------------------------------
数组名是首元素地址
sizeof(数组名)，计算整个数组的大小，单位是字节，sizeof内部单独放一个数组名，数组名表示整个数组
&数组名，取出的是数组的地址。&数组名，数组名表示整个数组
一维数组创建，[]中要给一个   常量  ，不能使用变量
    sizeof 计算所占空间的大小   计算变量、数组、类型的大小---单位是字节  --操作符
    strlen 求字符串的长度---'\0'之前的字符个数，只能求字符串长度----库函数--使用得引用头文件
    sizeof 和 strlen 没有关系
二维数组创建不能省略列标  [][]行列
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================================================================


================================================================================================================================
================================================================================================================================

                                                 指针

--------------------------------------------------------------------------------------------------------------------------------
指针           * （解引用操作符（通过地址取其值））取值，& 取地址
--------------------------------------------------------------------------------------------------------------------------------
                                        arr[i] == *(arr+i) == *(p+i) == p[i]                     //test_2210_30
                                        int 为原数组或函数类型
int arr[5];               arr是一个5元素的整型数组    
int *parr1[10];           parr1是一个数组，数组有10个元素，每个元素的类型是 int*，parr1是指针数组
int (*parr2)[10];         parr2是一个指针，该指针指向了一个数组，数组有10个元素，每个元素类型是int，parr2是数组指针
int (*parr3[10])[5];      parr3是一个数组，该数组有10个元素，每个元素是一个数组指针，该数组指针指向的数组有5个元素，每个元素是int
int (*p)(int ,int)        函数指针                  int (*)()---类型    p-----函数名
int (*p[])(int ,int )     函数指针数组          --用途：转移表
--------------------------------------------------------------------------------------------------------------------------------
&函数名 和 函数名 都是函数的地址

int*   类型指针，接收int类型的地址
char*  类型指针，可以接收char类型的地址  
void*  类型指针，可以接收任意类型地址，不能进行解引用（*）操作，不能进行+ -整数的操作

回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就
说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================================================================


================================================================================================================================
================================================================================================================================

                                                  字符串
--------------------------------------------------------------------------------------------------------------------------------
字符串比较不能直接用 < = > 比较，应该用strcmp

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================================================================


================================================================================================================================
================================================================================================================================

                                                   结构体

--------------------------------------------------------------------------------------------------------------------------------
typedef {} () 对{}进行重新取名为()
C语言允许用户使用 typedef 关键字来定义自己习惯的数据类型名称，来替代系统默认的基本类型名称、数组类型名称、指针类型名称与用户自定义的结构
型名称、共用型名称、枚举型名称等。一旦用户在程序中定义了自己的数据类型名称，就可以在该程序中用自己的数据类型名称来定义变量的类型、数组的
类型、指针变量的类型与函数的类型等。
--------------------------------------------------------------------------------------------------------------------------------
->是一个整体，它是用于指向结构体、C++中的class等含有子数据的指针用来取子数据。换种说法，如果我们在C语
言中定义了一个结构体，然后申明一个指针指向这个结构体，那么我们要用指针取出结构体中的数据，就要用到“->”.

--------------------------------------------------------------------------------------------------------------------------------
struct tag                        结构体关键字  结构体标签    struct tag 结构体类型
{
    member-list;                  成员变量
}varuable-list;                   全局变量
--------------------------------------------------------------------------------------------------------------------------------
typedef struct Stu               重新定义类型名
{

}stu;                            定义struct Stu s1 / stu s2 
--------------------------------------------------------------------------------------------------------------------------------
函数传参压栈操作
内存分区     栈区      局部变量、函数的形式参数、函数调用时开辟的空间
            堆区      动态内存分配、molloc/free、realloc、calloc
            静态区    全局变量、静态变量
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================================================================


================================================================================================================================
================================================================================================================================

                                                   运算符

--------------------------------------------------------------------------------------------------------------------------------

1   后缀运算符           []    ()    ·    ->    ++    --(类型名称){列表}	            从左到右
2	一元运算符           ++    --    !    ~     +     -    *    &    sizeof_Alignof	   从右到左
3	类型转换运算符       (类型名称)	                                                    从右到左
4	乘除法运算符         *     /    %	                                               从左到右
5	加减法运算符         +     -	                                                   从左到右
6	移位运算符           <<    >>	                                                   从左到右
7	关系运算符           <<=   >>=	                                                   从左到右
8	相等运算符           ==    !=	                                                   从左到右
9	位运算符 AND         &	                                                           从左到右
10	位运算符 XOR         ^	                                                           从左到右
11	位运算符 OR          |	                                                           从左到右
12	逻辑运算符 AND       &&	                                                           从左到右
13	逻辑运算符 OR        ||	                                                           从左到右
14	条件运算符           ?:	                                                           从右到左
15	赋值运算符           =     +=    -=   *=   /=     %=   &=    ^=   |=   <<=  >>=	   从右到左
16	逗号运算符           ，	                                                           从左到右
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================================================================


================================================================================================================================
================================================================================================================================


--------------------------------------------------------------------------------------------------------------------------------
================================================================================================================================
================================================================================================================================
================================================================================================================================